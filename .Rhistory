subway_facet %>% summarise(day_of_week)
subway_facet <- subway_facet %>% group_by(day_of_week) %>% summarise(sum(hourly_entries))
View(hourly_entries_exits_rates)
View(subway_facet)
subway_facet <- complete.cases(subway_facet)
subway_facet <- subway_facet[,complete.cases(subway_facet)]
subway_facet <- hourly_entries_exits_rates[c("day_of_week", "hourly_entries")]
subway_facet <- subway_facet[, complete.cases(subway_facet)]
subway_facet <- hourly_entries_exits_rates[c("day_of_week", "hourly_entries")]
subway_facet <- subway_facet[complete.cases(subway_facet),]
View(subway_facet)
subway_facet <- subway_facet %>% group_by(day_of_week) %>% summarise(sum(hourly_entries))
View(subway_facet)
ggplot(data=subway_facet, aes(x=hourly_entries))
ggplot(data=subway_facet, aes(x=hourly_entries fill=sample))
ggplot(data=subway_facet, aes(x=hourly_entries))
View(subway_facet)
subway_facet <- hourly_entries_exits_rates[c("day_of_week", "hourly_entries")]
subway_facet <- subway_facet[complete.cases(subway_facet),]
subway_facet <- subway_facet %>% group_by(day_of_week) %>% summarise(hourly_entries = sum(hourly_entries))
ggplot(data=subway_facet, aes(x=hourly_entries))
View(subway_facet)
ggplot(data=subway_facet, aes(x=hourly_entries, y=day_of_week))
ggplot(data=subway_facet, aes(x=hourly_entries, y=day_of_week)) + geom_bar()
ggplot(data=subway_facet, aes(x=hourly_entries, y=day_of_week)) + geom_histogram()
ggplot(data=subway_facet, aes(x=hourly_entries, y=day_of_week)) + geom_count()
ggplot(data=subway_facet, aes(x=hourly_entries, y=day_of_week)) + geom_point()
ggplot(data=subway_facet, aes(x=day_of_week, y=hourly_entries)) + geom_point()
ggplot(data=subway_facet, aes(x=day_of_week, y=hourly_entries)) + geom_point() + scale_x_continuous(labels = comma)
ggplot(data=subway_facet, aes(x=day_of_week, y=hourly_entries)) + geom_point() + scale_y_continuous(labels = comma)
ggplot(data=subway_facet, aes(x=day_of_week, y=hourly_entries)) + geom_point() + scale_y_discrete(labels = comma)
ggplot(data=subway_facet, aes(x=day_of_week, y=hourly_entries)) + geom_point() +
scale_y_continuous(labels = comma) + + scale_x_discrete()
ggplot(data=subway_facet, aes(x=day_of_week, y=hourly_entries)) + geom_point() +
scale_y_continuous(labels = comma) + scale_x_discrete()
subway_facet <- subway_facet %>% group_by(day_of_week) %>% summarise(hourly_entries = avg(hourly_entries))
subway_facet <- subway_facet %>% group_by(day_of_week) %>% summarise(hourly_entries = mean(hourly_entries))
subway_facet <- hourly_entries_exits_rates[c("day_of_week", "hourly_entries")]
subway_facet <- subway_facet[complete.cases(subway_facet),]
subway_facet <- subway_facet %>% group_by(day_of_week) %>% summarise(hourly_entries = mean(hourly_entries))
subway_facet <- as.data.frame(subway_facet)
ggplot(data=subway_facet, aes(x=day_of_week, y=hourly_entries)) + geom_point() +
scale_y_continuous(labels = comma) + scale_x_discrete()
head(hourly_entries_exits_rates)
subwaydates <- subwaydata[c("date", "hourly_entries", "period")]
subwaydates <- subwaydata[c("date", "hourly_entries", "entry_exits_period")]
View(subwaydata)
View(subwaydata)
subwaydates <- subwaydata[c("date", "entries.delta")]
head(subwaydates)
subwaydates <- subwaydates[complete.cases(subwaydates),]
View(subwaydates)
subwaydates <- subwaydates %>% summarise(entries = sum(entries.delta))
subwaydates <- subwaydates %>% summarise(entries = sum(as.numeric(entries.delta)))
subwaydates <- subwaydata[c("date", "entries.delta")]
subwaydates <- subwaydates[complete.cases(subwaydates),]
subwaydates <- subwaydates %>% summarise(entries = sum(as.numeric(entries.delta)))
View(subwaydates)
View(subwaydata)
View(subwaydates)
subwaydates <- subwaydates %>% group_by(date) %>% summarise(entries = sum(as.numeric(entries.delta)))
subwaydates <- subwaydata[c("date", "entries.delta")]
subwaydates <- subwaydates[complete.cases(subwaydates),]
subwaydates <- subwaydates %>% group_by(date) %>% summarise(entries = sum(as.numeric(entries.delta)))
View(subwaydata)
View(subwaydates)
ggplot(data=subway_facet, aes(x=date, y=entries)) + geom_point() +
scale_y_continuous(labels = comma) + scale_x_discrete()
View(subwaydata)
View(subwaydates)
ggplot(data=subwaydates, aes(x=date, y=entries)) + geom_point() +
scale_y_continuous(labels = comma) + scale_x_discrete()
ggplot(data=subwaydates, aes(x=date, y=entries)) + geom_histogram() +
scale_y_continuous(labels = comma) + scale_x_discrete()
ggplot(data=subwaydates, aes(x=date)) + geom_bar(stat=entries) +
scale_y_continuous(labels = comma) + scale_x_discrete()
ggplot(data=subwaydates, aes(x=date, y=entries)) + geom_bar(stat="entries") +
scale_y_continuous(labels = comma) + scale_x_discrete()
ggplot(data=subwaydates, aes(x=date, y=entries)) + geom_bar(stat="identity") +
scale_y_continuous(labels = comma) + scale_x_discrete()
ggplot(data=subwaydates, aes(x=date, y=entries)) + geom_histogram(stat="identity") +
scale_y_continuous(labels = comma) + scale_x_discrete()
ggplot(data=subwaydates, aes(x=date, y=entries)) + geom_histogram(binwidth = 10, stat="identity") +
scale_y_continuous(labels = comma) + scale_x_discrete()
ggplot(data=subwaydates, aes(x=date, y=entries)) + geom_histogram(bins = 10, stat="identity") +
scale_y_continuous(labels = comma) + scale_x_discrete()
ggplot(data=subwaydates, aes(x=date, y=entries)) + geom_histogram(bins = 10, stat="identity")
ggplot(data=subwaydates, aes(x=date, y=entries)) + geom_histogram(stat="identity")
setwd(".")
subwaydata <- read.csv("sample_ts.csv", stringsAsFactors = FALSE)  # read csv file
# creating dataframe with num_entries, num_exits, and time difference
names(subwaydata) <- tolower(names(subwaydata))
subwaydata$date.time <- with(subwaydata, paste(date, time, sep=' '))
subwaydata$date.time <- with(subwaydata, strptime(date.time, "%m/%d/%Y %H:%M:%S"))
subwaydata$date.time <- with(subwaydata, as.POSIXct((date.time)))
#Might need to re-add those to make the lines.
subwaydata <- as.data.frame(subwaydata) %>%select(-gtfs_route) # drop incomplete gtfs routes
subwaydata <- group_by(subwaydata, c.a, unit, scp, station, linename) # select unique turnstiles for each station
subwaydata <- arrange(subwaydata, date.time) %>%
mutate(time.delta = as.numeric(date.time-lag(date.time),units="hours"),
entries.delta = entries - lag(entries),
exits.delta = exits - lag(exits),
day_of_week = dayOfWeek(as.timeDate(date)))
#Why are we bucketing? What does it look like without the buckets?
subwaydata <-subwaydata %>%
mutate(entry_exits_period = as.character(ifelse(time > "0:00:00" & time <= "04:00:00", as.character("0:4"),
ifelse(time > "04:00:00" & time <= "08:00:00", "4:8",
ifelse(time > "08:00:00" & time <= "12:00:00", "8:12",
ifelse(time > "12:00:00" & time <= "16:00:00", "12:16",
ifelse(time > "16:00:00" & time <= "20:00:00", "16:20", "20:0")))))))
#0 entries!
#weirddata <- subwaydata %>%
#  filter(entries.delta >= 100000) %>%
#  filter(exits.delta >= 100000) %>%
#  filter(exits.delta <= -1) %>%
#  filter(entries.delta <= -1)
subwaydata <- subwaydata %>%
filter(entries.delta < 100000) %>%
filter(exits.delta < 100000) %>%
filter(exits.delta > -1) %>%
filter(entries.delta > -1)
#/4 = hourly, since our buckets are four hours each.
hourly_entries_exits_rates <- group_by(subwaydata, station_id, entry_exits_period, date, day_of_week) %>%
summarise(hourly_entries = sum(as.numeric(entries.delta))/4,hourly_exits = sum(as.numeric(exits.delta))/4, station = station[1], linename=linename[1])
write.csv(hourly_entries_exits_rates, file = "subway_entries_exits.csv")
head(hourly_entries_exits_rates)
subwaydates <- subwaydata[c("date", "entries.delta")]
subwaydates <- subwaydates[complete.cases(subwaydates),]
subwaydates <- subwaydates %>% group_by(date) %>% summarise(entries = sum(as.numeric(entries.delta)))
ggplot(data=subwaydates, aes(x=date, y=entries)) + geom_histogram(stat="identity")
+ scale_y_continuous(labels = comma) + scale_x_discrete()
entries_exits_period <- group_by(entries_exits_rates, station_id, entry_exits_period) %>%
summarise(hourly_entries = mean(hourly_entries),hourly_exits = mean(hourly_exits), station = station[1], line_name=line_name[1], lat=lat[1], long=long[1])
entries_exits_period <- group_by(hourly_entries_exits_rates, station_id, entry_exits_period) %>%
summarise(hourly_entries = mean(hourly_entries),hourly_exits = mean(hourly_exits), station = station[1], line_name=line_name[1], lat=lat[1], long=long[1])
entries_exits_period <- group_by(hourly_entries_exits_rates, station_id, entry_exits_period) %>%
summarise(hourly_entries = mean(hourly_entries),hourly_exits = mean(hourly_exits), station = station[1], linename=linename[1])
View(entries_exits_period)
write.csv(entries_exits_period, file = "entries_exits_average.csv")
setwd("~/subway")
setwd("~/subway")
library(dplyr)
setwd(".")
all_sub <- read.table("entries_exits_average.csv",header=TRUE, sep=",", # current turnstyle dataframe
quote = "\"", row.names = NULL, strip.white = TRUE,
stringsAsFactors = FALSE)
View(hourly_entries_exits_rates)
balancethings <- function(all_sub){
uniquetravel<- unique(subset(traintravel,select=c("station_id","station")))
all_sub<- inner_join(uniquetravel,all_sub, by = "station_id")
nrow(all_sub)
all_sub %>% group_by(entry_exits_period) %>%
summarise(sum_entries = sum(hourly_entries), sum_exits = sum(hourly_exits)) -> sums
sums %>% mutate(ratio = sum_entries/sum_exits) -> sums
sums$sum_exits <- NULL
sums$sum_entries <- NULL
new_sub <- merge(all_sub, sums, by = "entry_exits_period")
new_sub %>% mutate(scaled_exits = hourly_exits * ratio) -> new_sub
new_sub %>% mutate(rounded_scaled_exits = as.integer(scaled_exits+.5)) -> new_sub2
new_sub2 %>% mutate(rounded_hourly_entries = as.integer(hourly_entries+.5)) -> new_sub2
new_sub2 %>% group_by(entry_exits_period) %>%
summarise(sum_entries = sum(rounded_hourly_entries), sum_exits = sum(rounded_scaled_exits)) -> diff_sub
diff_sub$diff <- diff_sub$sum_entries-diff_sub$sum_exits
diff_sub <- data.frame(diff_sub[,c(1,4)])
new_sub2 <- inner_join(new_sub2, diff_sub)
new_sub2 %>% mutate(new_rounded_hourly_entries = ifelse(station_id == "127", rounded_hourly_entries - diff, rounded_hourly_entries)) -> new_sub2
return(new_sub2)
}
new_sub2 <- balancethings(all_sub)
all_sub %>% group_by(entry_exits_period) %>%
summarise(sum_entries = sum(hourly_entries), sum_exits = sum(hourly_exits)) -> sums
View(all_sub)
all_sub <- read.table("entries_exits_average.csv",header=TRUE, sep=",", # current turnstyle dataframe
quote = "\"", row.names = NULL, strip.white = TRUE,
stringsAsFactors = FALSE)
View(all_sub)
all_sub %>% group_by(entry_exits_period) %>%
summarise(sum_entries = sum(hourly_entries), sum_exits = sum(hourly_exits)) -> sums
View(all_sub)
sums %>% mutate(ratio = sum_entries/sum_exits) -> sums
View(all_sub)
View(sums)
View(sums)
View(sums)
sums$sum_exits <- NULL
sums$sum_entries <- NULL
View(sums)
new_sub <- merge(all_sub, sums, by = "entry_exits_period")
View(new_sub)
new_sub %>% mutate(scaled_exits = hourly_exits * ratio) -> new_sub
View(new_sub)
new_sub %>% mutate(rounded_scaled_exits = as.integer(scaled_exits+.5)) -> new_sub2
View(new_sub2)
new_sub2 %>% mutate(rounded_hourly_entries = as.integer(hourly_entries+.5)) -> new_sub2
View(new_sub2)
new_sub2 %>% group_by(entry_exits_period) %>%
summarise(sum_entries = sum(rounded_hourly_entries), sum_exits = sum(rounded_scaled_exits)) -> diff_sub
View(diff_sub)
diff_sub$diff <- diff_sub$sum_entries-diff_sub$sum_exits
View(diff_sub)
diff_sub <- data.frame(diff_sub[,c(1,4)])
View(diff_sub)
new_sub2 <- inner_join(new_sub2, diff_sub)
View(new_sub2)
View(diff_sub)
View(all_sub)
View(new_sub2)
new_sub2 %>% mutate(new_rounded_hourly_entries = ifelse(station_id == "s1013", rounded_hourly_entries - diff, rounded_hourly_entries)) -> new_sub2
# Riva Tropp
# 8/24/2016
# Simple script to scale up exits to match entries for use in min-cost-flow algorithm.
library(dplyr)
setwd(".")
all_sub <- read.table("entries_exits_average.csv",header=TRUE, sep=",", # current turnstyle dataframe
quote = "\"", row.names = NULL, strip.white = TRUE,
stringsAsFactors = FALSE)
balancethings <- function(all_sub){
#uniquetravel<- unique(subset(traintravel,select=c("station_id","station")))
#all_sub<- inner_join(uniquetravel,all_sub, by = "station_id")
#nrow(all_sub)
#Get the ratio of entries to exits by time bucket and add that to the df.
all_sub %>% group_by(entry_exits_period) %>%
summarise(sum_entries = sum(hourly_entries), sum_exits = sum(hourly_exits)) -> sums
sums %>% mutate(ratio = sum_entries/sum_exits) -> sums
sums$sum_exits <- NULL
sums$sum_entries <- NULL
new_sub <- merge(all_sub, sums, by = "entry_exits_period")
new_sub %>% mutate(scaled_exits = hourly_exits * ratio) -> new_sub
new_sub %>% mutate(rounded_scaled_exits = as.integer(scaled_exits+.5)) -> new_sub2
new_sub2 %>% mutate(rounded_hourly_entries = as.integer(hourly_entries+.5)) -> new_sub2
new_sub2 %>% group_by(entry_exits_period) %>%
summarise(sum_entries = sum(rounded_hourly_entries), sum_exits = sum(rounded_scaled_exits)) -> diff_sub
diff_sub$diff <- diff_sub$sum_entries-diff_sub$sum_exits
diff_sub <- data.frame(diff_sub[,c(1,4)])
new_sub2 <- inner_join(new_sub2, diff_sub)
#s1013 = Penn station
new_sub2 %>% mutate(new_rounded_hourly_entries = ifelse(station_id == "s1013", rounded_hourly_entries - diff, rounded_hourly_entries)) -> new_sub2
return(new_sub2)
}
new_sub2 <- balancethings(all_sub)
View(new_sub2)
the_wanted <- subset(new_sub2,select=c('entry_exits_period','station.x','rounded_scaled_exits','new_rounded_hourly_entries','station_id'))
View(new_sub2)
the_wanted <- subset(new_sub2,select=c('entry_exits_period','station','rounded_scaled_exits','new_rounded_hourly_entries','station_id'))
View(the_wanted)
latenight <- filter(the_wanted, entry_exits_period == "0:4")
morning <- filter(the_wanted, entry_exits_period == "4:8")
latemorning <- filter(the_wanted, entry_exits_period == "8:12")
noon <- filter(the_wanted, entry_exits_period == "12:16")
evening <- filter(the_wanted, entry_exits_period == "16:20")
night <- filter(the_wanted, entry_exits_period == "20:0")
write.csv(latenight, "f_latenight.csv",quote=FALSE)
write.csv(morning, "f_morning.csv",quote=FALSE)
write.csv(noon, "f_noon.csv",quote=FALSE)
write.csv(evening, "f_evening.csv",quote=FALSE)
write.csv(night, "f_night.csv",quote=FALSE)
write.csv(latemorning, "f_latemorning.csv",quote=FALSE)
write.csv(the_wanted, "all_entries_exits.csv", quote = FALSE)
new_sub2 %>% group_by(entry_exits_period) %>%
summarise(sum_entries = sum(new_rounded_hourly_entries), sum_exits = sum(rounded_scaled_exits)) -> diff_sub
diff_sub$diff <- diff_sub$sum_entries-diff_sub$sum_exits
head(diff_sub)
new_sub2 %>% group_by(entry_exits_period) %>%
summarise(sum_entries = sum(rounded_hourly_entries), sum_exits = sum(rounded_scaled_exits)) -> diff_sub
diff_sub$diff <- diff_sub$sum_entries-diff_sub$sum_exits
head(diff_sub)
new_sub2 %>% group_by(entry_exits_period) %>%
summarise(sum_entries = sum(rounded_hourly_entries), sum_exits = sum(rounded_scaled_exits)) -> sub
sub$diff <- sub$sum_entries-diff_sub$sum_exits
head(diff_sub)
# Riva Tropp
# 8/24/2016
# Simple script to scale up exits to match entries for use in min-cost-flow algorithm.
library(dplyr)
setwd(".")
all_sub <- read.table("entries_exits_average.csv",header=TRUE, sep=",", # current turnstyle dataframe
quote = "\"", row.names = NULL, strip.white = TRUE,
stringsAsFactors = FALSE)
balancethings <- function(all_sub){
#uniquetravel<- unique(subset(traintravel,select=c("station_id","station")))
#all_sub<- inner_join(uniquetravel,all_sub, by = "station_id")
#nrow(all_sub)
#Get the ratio of entries to exits by time bucket and add that to the df.
all_sub %>% group_by(entry_exits_period) %>%
summarise(sum_entries = sum(hourly_entries), sum_exits = sum(hourly_exits)) -> sums
sums %>% mutate(ratio = sum_entries/sum_exits) -> sums
sums$sum_exits <- NULL
sums$sum_entries <- NULL
new_sub <- merge(all_sub, sums, by = "entry_exits_period")
new_sub %>% mutate(scaled_exits = hourly_exits * ratio) -> new_sub
new_sub %>% mutate(rounded_scaled_exits = as.integer(scaled_exits+.5)) -> new_sub2
new_sub2 %>% mutate(rounded_hourly_entries = as.integer(hourly_entries+.5)) -> new_sub2
new_sub2 %>% group_by(entry_exits_period) %>%
summarise(sum_entries = sum(rounded_hourly_entries), sum_exits = sum(rounded_scaled_exits)) -> diff_sub
diff_sub$diff <- diff_sub$sum_entries-diff_sub$sum_exits
diff_sub <- data.frame(diff_sub[,c(1,4)])
new_sub2 <- inner_join(new_sub2, diff_sub)
#s1013 = Penn station
new_sub2 %>% mutate(new_rounded_hourly_entries = ifelse(station_id == "s1013", rounded_hourly_entries - diff, rounded_hourly_entries)) -> new_sub2
return(new_sub2)
}
new_sub2 <- balancethings(all_sub)
the_wanted <- subset(new_sub2,select=c('entry_exits_period','station','rounded_scaled_exits','new_rounded_hourly_entries','station_id'))
latenight <- filter(the_wanted, entry_exits_period == "0:4")
morning <- filter(the_wanted, entry_exits_period == "4:8")
latemorning <- filter(the_wanted, entry_exits_period == "8:12")
noon <- filter(the_wanted, entry_exits_period == "12:16")
evening <- filter(the_wanted, entry_exits_period == "16:20")
night <- filter(the_wanted, entry_exits_period == "20:0")
write.csv(latenight, "f_latenight.csv",quote=FALSE)
write.csv(morning, "f_morning.csv",quote=FALSE)
write.csv(noon, "f_noon.csv",quote=FALSE)
write.csv(evening, "f_evening.csv",quote=FALSE)
write.csv(night, "f_night.csv",quote=FALSE)
write.csv(latemorning, "f_latemorning.csv",quote=FALSE)
write.csv(the_wanted, "all_entries_exits.csv", quote = FALSE)
new_sub2 %>% group_by(entry_exits_period) %>%
summarise(sum_entries = sum(rounded_hourly_entries), sum_exits = sum(rounded_scaled_exits)) -> sub
sub$diff <- sub$sum_entries-diff_sub$sum_exits
head(diff_sub)
library(dplyr)
setwd(".")
all_sub <- read.table("entries_exits_average.csv",header=TRUE, sep=",", # current turnstyle dataframe
quote = "\"", row.names = NULL, strip.white = TRUE,
stringsAsFactors = FALSE)
balancethings <- function(all_sub){
#uniquetravel<- unique(subset(traintravel,select=c("station_id","station")))
#all_sub<- inner_join(uniquetravel,all_sub, by = "station_id")
#nrow(all_sub)
#Get the ratio of entries to exits by time bucket and add that to the df.
all_sub %>% group_by(entry_exits_period) %>%
summarise(sum_entries = sum(hourly_entries), sum_exits = sum(hourly_exits)) -> sums
sums %>% mutate(ratio = sum_entries/sum_exits) -> sums
sums$sum_exits <- NULL
sums$sum_entries <- NULL
all_sub <- merge(all_sub, sums, by = "entry_exits_period")
all_sub %>% mutate(scaled_exits = hourly_exits * ratio) -> all_sub
all_sub %>% mutate(rounded_scaled_exits = as.integer(scaled_exits+.5)) -> all_sub
all_sub %>% mutate(rounded_hourly_entries = as.integer(hourly_entries+.5)) -> all_sub
all_sub %>% group_by(entry_exits_period) %>%
summarise(sum_entries = sum(rounded_hourly_entries), sum_exits = sum(rounded_scaled_exits)) -> diff_sub
diff_sub$diff <- diff_sub$sum_entries-diff_sub$sum_exits
diff_sub <- data.frame(diff_sub[,c(1,4)])
all_sub <- inner_join(all_sub, diff_sub)
#s1013 = Penn station
all_sub %>% mutate(new_rounded_hourly_entries = ifelse(station_id == "s1013", rounded_hourly_entries - diff, rounded_hourly_entries)) -> all_sub
return(all_sub)
}
all_sub <- balancethings(all_sub)
View(all_sub)
View(all_sub)
# Riva Tropp
# 8/24/2016
# Simple script to scale up exits to match entries for use in min-cost-flow algorithm.
library(dplyr)
setwd(".")
all_sub <- read.table("entries_exits_average.csv",header=TRUE, sep=",", # current turnstyle dataframe
quote = "\"", row.names = NULL, strip.white = TRUE,
stringsAsFactors = FALSE)
balancethings <- function(all_sub){
#uniquetravel<- unique(subset(traintravel,select=c("station_id","station")))
#all_sub<- inner_join(uniquetravel,all_sub, by = "station_id")
#nrow(all_sub)
#Get the ratio of entries to exits by time bucket and add that to the df.
all_sub %>% group_by(entry_exits_period) %>%
summarise(sum_entries = sum(hourly_entries), sum_exits = sum(hourly_exits)) -> sums
sums %>% mutate(ratio = sum_entries/sum_exits) -> sums
sums$sum_exits <- NULL
sums$sum_entries <- NULL
all_sub <- merge(all_sub, sums, by = "entry_exits_period")
all_sub %>% mutate(scaled_exits = hourly_exits * ratio) -> all_sub
all_sub %>% mutate(rounded_scaled_exits = as.integer(scaled_exits+.5)) -> all_sub
all_sub %>% mutate(rounded_hourly_entries = as.integer(hourly_entries+.5)) -> all_sub
all_sub %>% group_by(entry_exits_period) %>%
summarise(sum_entries = sum(rounded_hourly_entries), sum_exits = sum(rounded_scaled_exits)) -> diff_sub
diff_sub$diff <- diff_sub$sum_entries-diff_sub$sum_exits
diff_sub <- data.frame(diff_sub[,c(1,4)])
all_sub <- inner_join(all_sub, diff_sub)
#s1013 = Penn station
all_sub %>% mutate(rounded_hourly_entries = ifelse(station_id == "s1013", rounded_hourly_entries - diff, rounded_hourly_entries)) -> all_sub
return(all_sub)
}
all_sub <- balancethings(all_sub)
View(all_sub)
all_sub %>% group_by(entry_exits_period) %>%
summarise(sum_entries = sum(rounded_hourly_entries), sum_exits = sum(rounded_scaled_exits)) -> sub
sub$diff <- sub$sum_entries-diff_sub$sum_exits
head(diff_sub)
all_sub %>% group_by(entry_exits_period) %>%
summarise(sum_entries = sum(rounded_hourly_entries), sum_exits = sum(rounded_scaled_exits)) -> diffsub
diffsub$diff <- diffsub$sum_entries-diff_sub$sum_exits
View(diffsub)
View(all_sub)
entries_exits_period$hourly_entries
entries_exits_period$hourly_entries_exits
head(entries_exits_period)
library(dplyr)
library(timeDate)
library(reshape)
library(ggplot2)
library(data.table)
library(tidyr)
library(scales)
#?
library(GISTools)
setwd(".")
subwaydata <- read.csv("sample_ts.csv", stringsAsFactors = FALSE)  # read csv file
# creating dataframe with num_entries, num_exits, and time difference
names(subwaydata) <- tolower(names(subwaydata))
subwaydata$date.time <- with(subwaydata, paste(date, time, sep=' '))
subwaydata$date.time <- with(subwaydata, strptime(date.time, "%m/%d/%Y %H:%M:%S"))
subwaydata$date.time <- with(subwaydata, as.POSIXct((date.time)))
#Might need to re-add those to make the lines.
subwaydata <- as.data.frame(subwaydata) %>%select(-gtfs_route) # drop incomplete gtfs routes
subwaydata <- group_by(subwaydata, c.a, unit, scp, station, linename) # select unique turnstiles for each station
subwaydata <- arrange(subwaydata, date.time) %>%
mutate(time.delta = as.numeric(date.time-lag(date.time),units="hours"),
entries.delta = entries - lag(entries),
exits.delta = exits - lag(exits),
day_of_week = dayOfWeek(as.timeDate(date)))
#Why are we bucketing? What does it look like without the buckets?
subwaydata <-subwaydata %>%
mutate(entry_exits_period = as.character(ifelse(time > "0:00:00" & time <= "04:00:00", as.character("0:4"),
ifelse(time > "04:00:00" & time <= "08:00:00", "4:8",
ifelse(time > "08:00:00" & time <= "12:00:00", "8:12",
ifelse(time > "12:00:00" & time <= "16:00:00", "12:16",
ifelse(time > "16:00:00" & time <= "20:00:00", "16:20", "20:0")))))))
#0 entries!
#weirddata <- subwaydata %>%
#  filter(entries.delta >= 100000) %>%
#  filter(exits.delta >= 100000) %>%
#  filter(exits.delta <= -1) %>%
#  filter(entries.delta <= -1)
subwaydata <- subwaydata %>%
filter(entries.delta < 100000) %>%
filter(exits.delta < 100000) %>%
filter(exits.delta > -1) %>%
filter(entries.delta > -1)
#/4 = hourly, since our buckets are four hours each.
hourly_entries_exits_rates <- group_by(subwaydata, station_id, entry_exits_period, date, day_of_week) %>%
summarise(hourly_entries = sum(as.numeric(entries.delta))/4,hourly_exits = sum(as.numeric(exits.delta))/4, station = station[1], linename=linename[1])
write.csv(hourly_entries_exits_rates, file = "subway_entries_exits.csv")
entries_exits_period <- group_by(hourly_entries_exits_rates, station_id, entry_exits_period) %>%
summarise(hourly_entries = mean(hourly_entries),hourly_exits = mean(hourly_exits), station = station[1], linename=linename[1])
#entries_exits_period$hourly_entries_exits
write.csv(entries_exits_period, file = "entries_exits_average.csv")
#Dates against numbers
#subwaydates <- subwaydata[c("date", "entries.delta")]
#subwaydates <- subwaydates[complete.cases(subwaydates),]
#subwaydates <- subwaydates %>% group_by(date) %>% summarise(entries = sum(as.numeric(entries.delta)))
#ggplot(data=subwaydates, aes(x=date, y=entries)) + geom_histogram(stat="identity")
#+ scale_y_continuous(labels = comma) + scale_x_discrete()
head(hourly_entries_exits_rates)
entries_exits_period <- entries_exits_period[,complete.cases(entries_exits_period)]
entries_exits_period <- entries_exits_period[complete.cases(entries_exits_period),]
entries_exits_period <- group_by(hourly_entries_exits_rates, station_id, entry_exits_period) %>%
summarise(hourly_entries = mean(hourly_entries),hourly_exits = mean(hourly_exits), station = station[1], linename=linename[1])
entries_exits_period <- entries_exits_period[complete.cases(entries_exits_period),]
write.csv(entries_exits_period, file = "entries_exits_average.csv")
library(dplyr)
setwd(".")
all_sub <- read.table("entries_exits_average.csv",header=TRUE, sep=",", # current turnstyle dataframe
quote = "\"", row.names = NULL, strip.white = TRUE,
stringsAsFactors = FALSE)
balancethings <- function(all_sub){
#uniquetravel<- unique(subset(traintravel,select=c("station_id","station")))
#all_sub<- inner_join(uniquetravel,all_sub, by = "station_id")
#nrow(all_sub)
#Get the ratio of entries to exits by time bucket and add that to the df.
all_sub %>% group_by(entry_exits_period) %>%
summarise(sum_entries = sum(hourly_entries), sum_exits = sum(hourly_exits)) -> sums
sums %>% mutate(ratio = sum_entries/sum_exits) -> sums
sums$sum_exits <- NULL
sums$sum_entries <- NULL
all_sub <- merge(all_sub, sums, by = "entry_exits_period")
all_sub %>% mutate(scaled_exits = hourly_exits * ratio) -> all_sub
all_sub %>% mutate(rounded_scaled_exits = as.integer(scaled_exits+.5)) -> all_sub
all_sub %>% mutate(rounded_hourly_entries = as.integer(hourly_entries+.5)) -> all_sub
all_sub %>% group_by(entry_exits_period) %>%
summarise(sum_entries = sum(rounded_hourly_entries), sum_exits = sum(rounded_scaled_exits)) -> diff_sub
diff_sub$diff <- diff_sub$sum_entries-diff_sub$sum_exits
diff_sub <- data.frame(diff_sub[,c(1,4)])
all_sub <- inner_join(all_sub, diff_sub)
#s1013 = Penn station
all_sub %>% mutate(rounded_hourly_entries = ifelse(station_id == "s1013", rounded_hourly_entries - diff, rounded_hourly_entries)) -> all_sub
return(all_sub)
}
all_sub <- balancethings(all_sub)
the_wanted <- subset(all_sub,select=c('entry_exits_period','station','rounded_scaled_exits','new_rounded_hourly_entries','station_id'))
View(all_sub)
View(all_sub)
the_wanted <- subset(all_sub,select=c('entry_exits_period','station','rounded_scaled_exits','rounded_hourly_entries','station_id'))
View(the_wanted)
latenight <- filter(the_wanted, entry_exits_period == "0:4")
morning <- filter(the_wanted, entry_exits_period == "4:8")
latemorning <- filter(the_wanted, entry_exits_period == "8:12")
noon <- filter(the_wanted, entry_exits_period == "12:16")
evening <- filter(the_wanted, entry_exits_period == "16:20")
night <- filter(the_wanted, entry_exits_period == "20:0")
write.csv(latenight, "f_latenight.csv",quote=FALSE)
write.csv(morning, "f_morning.csv",quote=FALSE)
write.csv(noon, "f_noon.csv",quote=FALSE)
write.csv(evening, "f_evening.csv",quote=FALSE)
write.csv(night, "f_night.csv",quote=FALSE)
write.csv(latemorning, "f_latemorning.csv",quote=FALSE)
write.csv(the_wanted, "all_entries_exits.csv", quote = FALSE)
all_sub %>% group_by(entry_exits_period) %>%
summarise(sum_entries = sum(rounded_hourly_entries), sum_exits = sum(rounded_scaled_exits)) -> diffsub
diffsub$diff <- diffsub$sum_entries-diff_sub$sum_exits
diffsub$diff <- diffsub$sum_entries-diffsub$sum_exits
head(diff_sub)
head(diffsub)
