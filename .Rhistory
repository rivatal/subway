getwd()
setwd(".")
getwd()
library(dplyr)
setwd("~/subway/gtfs_data/")
stop_times <- read.table("stop_times.txt",header=TRUE,
sep=",",fill=TRUE,quote = "",row.names = NULL,
stringsAsFactors = FALSE)
stops <- read.table("stops.txt", header=TRUE,
sep=",",fill=TRUE,quote = "",row.names = NULL,
stringsAsFactors = FALSE)
setwd("~/subway/gtfs_data/")
trips <- read.table("trips.txt",header=TRUE,
sep=",",fill=TRUE,quote = "",row.names = NULL,
stringsAsFactors = FALSE)
library(dplyr)
library(timeDate)
library(reshape)
library(ggplot2)
library(data.table)
library(tidyr)
library(scales)
#?
#library(GISTools)
setwd(".")
subwaydata <- read.csv("sample_ts.csv", stringsAsFactors = FALSE)  # read csv file
subwaydata <- read.csv("all_ts.csv", stringsAsFactors = FALSE)  # read csv file
setwd("~/subway")
library(dplyr)
library(timeDate)
library(reshape)
library(ggplot2)
library(data.table)
library(tidyr)
library(scales)
#?
#library(GISTools)
setwd(".")
subwaydata <- read.csv("all_ts.csv", stringsAsFactors = FALSE)  # read csv file
len(subwaydata)
length(subwaydata)
nrows(subwaydata)
nrow(subwaydata)
subwaydata2 <- sample(subwaydata, nrow(subwaydata)/4)
subwaydata2 <- sample(subwaydata, (nrow(subwaydata)/4))
subwaydata2 <- sample_n(subwaydata, (nrow(subwaydata)/4))
View(subwaydata2)
subwaydata <- subwaydata2
source('~/subway/load_subway_trips.R')
library(dplyr)
library(timeDate)
library(reshape)
library(ggplot2)
library(data.table)
library(tidyr)
library(scales)
#?
#library(GISTools)
setwd(".")
subwaydata <- read.csv("all_ts.csv", stringsAsFactors = FALSE)  # read csv file
#SAMPLE!!
subwaydata <- sample_n(subwaydata, (nrow(subwaydata)/4))
names(subwaydata) <- tolower(names(subwaydata))
subwaydata$date.time <- with(subwaydata, paste(date, time, sep=' '))
subwaydata$date.time <- with(subwaydata, strptime(date.time, "%m/%d/%Y %H:%M:%S"))
subwaydata$date.time <- with(subwaydata, as.POSIXct((date.time)))
#Might need to re-add those to make the lines.
subwaydata <- as.data.frame(subwaydata) %>%select(-gtfs_route, -x) # drop incomplete gtfs routes
subwaydata <- subwaydata[!duplicated(subwaydata),]
##THIS IS PROBLEMATIC
subwaydata <- group_by(subwaydata, c.a, unit, scp, station, linename) # select unique turnstiles for each station
subwaydata <- arrange(subwaydata, date.time) %>%
mutate(time.delta = as.numeric(date.time-lag(date.time),units="hours"),
entries.delta = entries - lag(entries),
exits.delta = exits - lag(exits),
day_of_week = dayOfWeek(as.timeDate(date)))
#Why are we bucketing? What does it look like without the buckets?
subwaydata <-subwaydata %>%
mutate(entry_exits_period = as.character(ifelse(time > "0:00:00" & time <= "04:00:00", as.character("0:4"),
ifelse(time > "04:00:00" & time <= "08:00:00", "4:8",
ifelse(time > "08:00:00" & time <= "12:00:00", "8:12",
ifelse(time > "12:00:00" & time <= "16:00:00", "12:16",
ifelse(time > "16:00:00" & time <= "20:00:00", "16:20", "20:0")))))))
subwaydata2 <- subwaydata %>%
filter(entries.delta < 100000) %>%
filter(exits.delta < 100000) %>%
filter(exits.delta > -1) %>%
filter(entries.delta > -1)
subwaydata2 <- subwaydata %>%
filter(entries.delta < 10000) %>%
filter(exits.delta < 10000) %>%
filter(exits.delta > -1) %>%
filter(entries.delta > -1)
View(subwaydata2)
max(subwaydata$entries.delta)
max(subwaydata$entries.delta, na.rm = True)
max(subwaydata$entries.delta, na.rm = T)
max(subwaydata2$entries.delta, na.rm = T)
ggplot(data = subwaydata, aes(x = station, y = entries))
ggplot(data = subwaydata, aes(x = station, y = entries)) + geom_point()
ggplot(data = subwaydata, aes(x = entries.delta) + geom_point()
entries <- subwaydata %>% group_by(entries.delta) %>% summarise()
ggplot(data = subwaydata, aes(x = entries.delta) + geom_point()
)
b
entries <- subwaydata %>% group_by(entries.delta) %>% summarise()
View(entries)
entries <- subwaydata %>% group_by(entries.delta) %>% summarise(n())
View(entries)
ggplot(data = entries, aes(x = entries.delta, y= ) + geom_point()
)
View(entries)
ggplot(data = entries, aes(x = entries.delta, y= n()) + geom_point()
)
ggplot(data = entries, aes(x = entries.delta, y= n())) + geom_point()
entries <- subwaydata %>% group_by(entries.delta) %>% summarise(count = n())
ggplot(data = entries, aes(x = entries.delta, y= count) + geom_point()
)
ggplot(data = entries, aes(x = entries.delta, y= count)) + geom_point()
entries <- filter(entries, entries.delta > 0)
ggplot(data = entries, aes(x = entries.delta, y= count)) + geom_point()
entries <- filter(entries, entries.delta > 1)
ggplot(data = entries, aes(x = entries.delta, y= count)) + geom_point()
entries <- filter(entries, entries.delta > 1) %>% filter(entries, entries.delta < 100000)
entries <- filter(entries, entries.delta > 1) %>% filter(entries, entries.delta < 100000)
entries <- filter(entries, entries.delta > 1) %>% filter(entries, entries.delta < 100000)
entries <- filter(entries, entries.delta > 1) %>% filter(entries.delta < 100000)
ggplot(data = entries, aes(x = entries.delta, y= count)) + geom_point()
entries <- filter(entries, entries.delta > 1) %>% filter(entries.delta < 75000)
ggplot(data = entries, aes(x = entries.delta, y= count)) + geom_point()
alot <- subwaydata %>% filter(entries.data > 60000 && entries.data < 75000)
alot <- subwaydata %>% filter(entries.delta > 60000 && entries.delta < 75000)
View(alot)
alot <- subwaydata %>% filter(entries.delta > 60000)
View(alot)
subwaydata <- subwaydata %>%
filter(entries.delta < 75000) %>%
filter(exits.delta < 75000) %>%
filter(exits.delta > -1) %>%
filter(entries.delta > -1)
daily_entries_exits_rates <- group_by(subwaydata, station_id, entry_exits_period, date, day_of_week) %>% summarize(sum(as.numeric(entries), sum(as.numeric(exits))))
write.csv(daily_entries_exits_rates, file = "daily_entries_exits.csv", row.names = FALSE)
weekenddata <- subwaydata %>% filter(grepl('Sun|Sat', day_of_week))
#/4 = hourly, since our buckets are four hours each.
hourly_entries_exits_rates <- group_by(subwaydata, station_id, entry_exits_period, date, day_of_week) %>%
summarise(hourly_entries = sum(as.numeric(entries.delta))/4,hourly_exits = sum(as.numeric(exits.delta))/4, station = station[1], linename=linename[1])
write.csv(hourly_entries_exits_rates, file = "subway_entries_exits.csv")
entries_exits_period <- group_by(hourly_entries_exits_rates, station_id, entry_exits_period) %>%
summarise(hourly_entries = mean(hourly_entries),hourly_exits = mean(hourly_exits), station = station[1], linename=linename[1])
entries_exits_period <- entries_exits_period[complete.cases(entries_exits_period),]
#entries_exits_period$hourly_entries_exits
write.csv(entries_exits_period, file = "entries_exits_average.csv")
########################################################################3
#For the weekend data:
#########################################################################
weekend_hourly_exits <- group_by(weekenddata, station_id, entry_exits_period, date, day_of_week) %>%
summarise(hourly_entries = sum(as.numeric(entries.delta))/4,hourly_exits = sum(as.numeric(exits.delta))/4, station = station[1], linename=linename[1])
weekend_entries_exits <- group_by(weekend_hourly_exits, station_id, entry_exits_period) %>%
summarise(hourly_entries = mean(hourly_entries),hourly_exits = mean(hourly_exits), station = station[1], linename=linename[1])
weekend_period <- weekend_entries_exits[complete.cases(weekend_entries_exits),]
write.csv(weekend_period, file = "weekend_averages.csv", row.names = FALSE)
library(ggmap)
library(ggplot2)
library(dplyr)
setwd(".")
data <- read.csv("daily_entries_exits.csv")
colnames(data)[5] <- "entries"
colnames(data)[6] <- "exits"
library(ggmap)
library(ggplot2)
library(dplyr)
setwd(".")
data <- read.csv("daily_entries_exits.csv")
View(data)
########################################################################################################################################################################
# Description: Code to load turnstile data into master dataframe and review statistics
#
########################################################################################################################################################################
#CHANGE TO ALL_TS!
library(dplyr)
library(timeDate)
library(reshape)
library(ggplot2)
library(data.table)
library(tidyr)
library(scales)
#?
#library(GISTools)
setwd(".")
subwaydata <- read.csv("all_ts.csv", stringsAsFactors = FALSE)  # read csv file
#SAMPLE!!
subwaydata <- sample_n(subwaydata, (nrow(subwaydata)/4))
# creating dataframe with num_entries, num_exits, and time difference
names(subwaydata) <- tolower(names(subwaydata))
subwaydata$date.time <- with(subwaydata, paste(date, time, sep=' '))
subwaydata$date.time <- with(subwaydata, strptime(date.time, "%m/%d/%Y %H:%M:%S"))
subwaydata$date.time <- with(subwaydata, as.POSIXct((date.time)))
#Might need to re-add those to make the lines.
subwaydata <- as.data.frame(subwaydata) %>%select(-gtfs_route, -x) # drop incomplete gtfs routes
subwaydata <- subwaydata[!duplicated(subwaydata),]
subwaydata <- group_by(subwaydata, c.a, unit, scp, station, linename) # select unique turnstiles for each station
subwaydata <- arrange(subwaydata, date.time) %>%
mutate(time.delta = as.numeric(date.time-lag(date.time),units="hours"),
entries.delta = entries - lag(entries),
exits.delta = exits - lag(exits),
day_of_week = dayOfWeek(as.timeDate(date)))
subwaydata <-subwaydata %>%
mutate(entry_exits_period = as.character(ifelse(time > "0:00:00" & time <= "04:00:00", as.character("0:4"),
ifelse(time > "04:00:00" & time <= "08:00:00", "4:8",
ifelse(time > "08:00:00" & time <= "12:00:00", "8:12",
ifelse(time > "12:00:00" & time <= "16:00:00", "12:16",
ifelse(time > "16:00:00" & time <= "20:00:00", "16:20", "20:0")))))))
#Some tests to check large entries:
#alot <- subwaydata %>% filter(entries.delta > 60000)
#entries <- subwaydata %>% group_by(entries.delta) %>% summarise(count = n())
#entries <- filter(entries, entries.delta > 1) %>% filter(entries.delta < 75000)
#ggplot(data = entries, aes(x = entries.delta, y= count)) + geom_point()
#More than 10000 in 4 hours?
subwaydata <- subwaydata %>%
filter(entries.delta < 75000) %>%
filter(exits.delta < 75000) %>%
filter(exits.delta > -1) %>%
filter(entries.delta > -1)
daily_entries_exits_rates <- group_by(subwaydata, station_id, entry_exits_period, date, day_of_week) %>% summarize(entries = sum(as.numeric(entries), exits = sum(as.numeric(exits))))
View(daily_entries_exits_rates)
daily_entries_exits_rates <- group_by(subwaydata, station_id, entry_exits_period, date, day_of_week) %>% summarize(entries = sum(as.numeric(entries)), exits = sum(as.numeric(exits)))
View(daily_entries_exits_rates)
write.csv(daily_entries_exits_rates, file = "daily_entries_exits.csv", row.names = FALSE)
weekenddata <- subwaydata %>% filter(grepl('Sun|Sat', day_of_week))
#/4 = hourly, since our buckets are four hours each.
hourly_entries_exits_rates <- group_by(subwaydata, station_id, entry_exits_period, date, day_of_week) %>%
summarise(hourly_entries = sum(as.numeric(entries.delta))/4,hourly_exits = sum(as.numeric(exits.delta))/4, station = station[1], linename=linename[1])
write.csv(hourly_entries_exits_rates, file = "subway_entries_exits.csv")
entries_exits_period <- group_by(hourly_entries_exits_rates, station_id, entry_exits_period) %>%
summarise(hourly_entries = mean(hourly_entries),hourly_exits = mean(hourly_exits), station = station[1], linename=linename[1])
entries_exits_period <- entries_exits_period[complete.cases(entries_exits_period),]
#entries_exits_period$hourly_entries_exits
write.csv(entries_exits_period, file = "entries_exits_average.csv")
########################################################################3
#For the weekend data:
#########################################################################
weekend_hourly_exits <- group_by(weekenddata, station_id, entry_exits_period, date, day_of_week) %>%
summarise(hourly_entries = sum(as.numeric(entries.delta))/4,hourly_exits = sum(as.numeric(exits.delta))/4, station = station[1], linename=linename[1])
weekend_entries_exits <- group_by(weekend_hourly_exits, station_id, entry_exits_period) %>%
summarise(hourly_entries = mean(hourly_entries),hourly_exits = mean(hourly_exits), station = station[1], linename=linename[1])
weekend_period <- weekend_entries_exits[complete.cases(weekend_entries_exits),]
write.csv(weekend_period, file = "weekend_averages.csv", row.names = FALSE)
library(ggmap)
library(ggplot2)
library(dplyr)
setwd(".")
data <- read.csv("daily_entries_exits.csv")
colnames(data)[5] <- "entries"
colnames(data)[6] <- "exits"
popular_times <- data[complete.cases(data),] %>% group_by(entry_exits_period) %>% summarize(entries =mean(as.numeric(entries)), exits= mean(as.numeric(exits)))
names(popular_times) <- c("time_bucket", "entries", "exits")
popular_times$time_bucket <- factor(popular_times$time_bucket, c("0:4", "4:8", "8:12", "12:16", "16:20", "20:0"))
popular_times <- arrange(popular_times, time_bucket)
library(ggmap)
library(ggplot2)
library(dplyr)
setwd(".")
data <- read.csv("daily_entries_exits.csv")
colnames(data)[5] <- "entries"
colnames(data)[6] <- "exits"
popular_times <- data[complete.cases(data),] %>% group_by(entry_exits_period) %>% summarize(entries =mean(as.numeric(entries)), exits= mean(as.numeric(exits)))
names(popular_times) <- c("time_bucket", "entries", "exits")
popular_times$time_bucket <- factor(popular_times$time_bucket, c("0:4", "4:8", "8:12", "12:16", "16:20", "20:0"))
popular_times <- arrange(popular_times, time_bucket)
ggplot(data = popular_times, aes(x = time_bucket, y = entries, fill = time_bucket)) +
geom_bar(stat = "identity") +
scale_y_continuous(label = comma)+
scale_fill_brewer(direction = -1) +
xlab("Time") + ylab("Entries") + ggtitle("Average entries by time of day (over the entire system)")
ggplot(data = popular_times, aes(x = time_bucket, y = exits, fill = time_bucket)) +
geom_bar(stat = "identity") +
scale_y_continuous(label = comma)+
scale_fill_brewer(direction = -1) +
xlab("Time") + ylab("Exits") + ggtitle("Average exits by time of day (over the entire system)")
ggplot(data = popular_times, aes(x = time_bucket, y = entries/exits, fill = time_bucket)) +
geom_bar(stat = "identity") +
scale_y_continuous(label = comma)+
scale_fill_brewer() +
xlab("Time") + ylab("Ratio of Entries to Exits") + ggtitle("Average entries/exits by time of day")
days <- data[complete.cases(data),] %>% group_by(date) %>% summarise(sum(as.numeric(entries)), sum(exits))
names(days) <- c("date", "entries", "exits")
ggplot(data = days, aes(x = date, y=entries, group=1)) + geom_line() +
scale_y_continuous(label = comma) + scale_fill_brewer()
january <- days %>% filter(substring(days$date, 1, 2) == "01")
ggplot(data = january, aes(x = date, y=entries, group=1)) + geom_line() +
scale_y_continuous(label = comma) + scale_fill_brewer()
october <- days %>% filter(substring(days$date, 1, 2) == "10")
ggplot(data = october, aes(x = date, y=entries, group=1)) + geom_line() +
scale_y_continuous(label = comma) + scale_fill_brewer()
########################################################################################################################################################################
# Description: Code to load turnstile data into master dataframe and review statistics
#
########################################################################################################################################################################
#CHANGE TO ALL_TS!
library(dplyr)
library(timeDate)
library(reshape)
library(ggplot2)
library(data.table)
library(tidyr)
library(scales)
#?
#library(GISTools)
setwd(".")
subwaydata <- read.csv("all_ts.csv", stringsAsFactors = FALSE)  # read csv file
#SAMPLE!!
subwaydata <- sample_n(subwaydata, (nrow(subwaydata)/4))
# creating dataframe with num_entries, num_exits, and time difference
names(subwaydata) <- tolower(names(subwaydata))
subwaydata$date.time <- with(subwaydata, paste(date, time, sep=' '))
subwaydata$date.time <- with(subwaydata, strptime(date.time, "%m/%d/%Y %H:%M:%S"))
subwaydata$date.time <- with(subwaydata, as.POSIXct((date.time)))
#Might need to re-add those to make the lines.
subwaydata <- as.data.frame(subwaydata) %>%select(-gtfs_route, -x) # drop incomplete gtfs routes
subwaydata <- subwaydata[!duplicated(subwaydata),]
subwaydata <- group_by(subwaydata, c.a, unit, scp, station, linename) # select unique turnstiles for each station
subwaydata <- arrange(subwaydata, date.time) %>%
mutate(time.delta = as.numeric(date.time-lag(date.time),units="hours"),
entries.delta = entries - lag(entries),
exits.delta = exits - lag(exits),
day_of_week = dayOfWeek(as.timeDate(date)))
subwaydata <-subwaydata %>%
mutate(entry_exits_period = as.character(ifelse(time > "0:00:00" & time <= "04:00:00", as.character("0:4"),
ifelse(time > "04:00:00" & time <= "08:00:00", "4:8",
ifelse(time > "08:00:00" & time <= "12:00:00", "8:12",
ifelse(time > "12:00:00" & time <= "16:00:00", "12:16",
ifelse(time > "16:00:00" & time <= "20:00:00", "16:20", "20:0")))))))
#Some tests to check large entries:
#alot <- subwaydata %>% filter(entries.delta > 60000)
#entries <- subwaydata %>% group_by(entries.delta) %>% summarise(count = n())
#entries <- filter(entries, entries.delta > 1) %>% filter(entries.delta < 75000)
#ggplot(data = entries, aes(x = entries.delta, y= count)) + geom_point()
#More than 10000 in 4 hours?
subwaydata <- subwaydata %>%
filter(entries.delta < 10000) %>%
filter(exits.delta < 10000) %>%
filter(exits.delta > -1) %>%
filter(entries.delta > -1)
daily_entries_exits_rates <- group_by(subwaydata, station_id, entry_exits_period, date, day_of_week) %>% summarize(entries = sum(as.numeric(entries)), exits = sum(as.numeric(exits)))
write.csv(daily_entries_exits_rates, file = "daily_entries_exits.csv", row.names = FALSE)
weekenddata <- subwaydata %>% filter(grepl('Sun|Sat', day_of_week))
#/4 = hourly, since our buckets are four hours each.
hourly_entries_exits_rates <- group_by(subwaydata, station_id, entry_exits_period, date, day_of_week) %>%
summarise(hourly_entries = sum(as.numeric(entries.delta))/4,hourly_exits = sum(as.numeric(exits.delta))/4, station = station[1], linename=linename[1])
write.csv(hourly_entries_exits_rates, file = "subway_entries_exits.csv")
entries_exits_period <- group_by(hourly_entries_exits_rates, station_id, entry_exits_period) %>%
summarise(hourly_entries = mean(hourly_entries),hourly_exits = mean(hourly_exits), station = station[1], linename=linename[1])
entries_exits_period <- entries_exits_period[complete.cases(entries_exits_period),]
#entries_exits_period$hourly_entries_exits
write.csv(entries_exits_period, file = "entries_exits_average.csv")
########################################################################3
#For the weekend data:
#########################################################################
weekend_hourly_exits <- group_by(weekenddata, station_id, entry_exits_period, date, day_of_week) %>%
summarise(hourly_entries = sum(as.numeric(entries.delta))/4,hourly_exits = sum(as.numeric(exits.delta))/4, station = station[1], linename=linename[1])
weekend_entries_exits <- group_by(weekend_hourly_exits, station_id, entry_exits_period) %>%
summarise(hourly_entries = mean(hourly_entries),hourly_exits = mean(hourly_exits), station = station[1], linename=linename[1])
weekend_period <- weekend_entries_exits[complete.cases(weekend_entries_exits),]
write.csv(weekend_period, file = "weekend_averages.csv", row.names = FALSE)
library(ggmap)
library(ggplot2)
library(dplyr)
setwd(".")
data <- read.csv("daily_entries_exits.csv")
colnames(data)[5] <- "entries"
colnames(data)[6] <- "exits"
popular_times <- data[complete.cases(data),] %>% group_by(entry_exits_period) %>% summarize(entries =mean(as.numeric(entries)), exits= mean(as.numeric(exits)))
names(popular_times) <- c("time_bucket", "entries", "exits")
popular_times$time_bucket <- factor(popular_times$time_bucket, c("0:4", "4:8", "8:12", "12:16", "16:20", "20:0"))
popular_times <- arrange(popular_times, time_bucket)
#cbbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2")
ggplot(data = popular_times, aes(x = time_bucket, y = entries, fill = time_bucket)) +
geom_bar(stat = "identity") +
scale_y_continuous(label = comma)+
scale_fill_brewer(direction = -1) +
xlab("Time") + ylab("Entries") + ggtitle("Average entries by time of day (over the entire system)")
#+ scale_x_discrete(labels = c("12-4 am", "12-4 pm", "4-8 pm", "8-12 am", "4-8 am", "8am-12pm"))
ggplot(data = popular_times, aes(x = time_bucket, y = exits, fill = time_bucket)) +
geom_bar(stat = "identity") +
scale_y_continuous(label = comma)+
scale_fill_brewer(direction = -1) +
xlab("Time") + ylab("Exits") + ggtitle("Average exits by time of day (over the entire system)")
ggplot(data = popular_times, aes(x = time_bucket, y = entries/exits, fill = time_bucket)) +
geom_bar(stat = "identity") +
scale_y_continuous(label = comma)+
scale_fill_brewer() +
xlab("Time") + ylab("Ratio of Entries to Exits") + ggtitle("Average entries/exits by time of day")
days <- data[complete.cases(data),] %>% group_by(date) %>% summarise(sum(as.numeric(entries)), sum(exits))
names(days) <- c("date", "entries", "exits")
ggplot(data = days, aes(x = date, y=entries, group=1)) + geom_line() +
scale_y_continuous(label = comma) + scale_fill_brewer()
january <- days %>% filter(substring(days$date, 1, 2) == "01")
ggplot(data = january, aes(x = date, y=entries, group=1)) + geom_line() +
scale_y_continuous(label = comma) + scale_fill_brewer()
max(data$entries)
